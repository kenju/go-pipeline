// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pipeline

import "context"

// RepeatString return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatString(
	ctx context.Context,
	values ...string,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnString call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnString(
	ctx context.Context,
	fn func() string,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatInt return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatInt(
	ctx context.Context,
	values ...int,
) <-chan int {
	ch := make(chan int)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnInt call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnInt(
	ctx context.Context,
	fn func() int,
) <-chan int {
	ch := make(chan int)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatFloat32 return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatFloat32(
	ctx context.Context,
	values ...float32,
) <-chan float32 {
	ch := make(chan float32)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnFloat32 call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnFloat32(
	ctx context.Context,
	fn func() float32,
) <-chan float32 {
	ch := make(chan float32)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}
