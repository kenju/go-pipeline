// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pipeline

import "context"

// ReduceInterface reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceInterface(
	ctx context.Context,
	fn func(v, acc interface{}) interface{},
	values <-chan interface{},
) <-chan interface{} {
	ch := make(chan interface{})

	var acc interface{}
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceBool reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceBool(
	ctx context.Context,
	fn func(v, acc bool) bool,
	values <-chan bool,
) <-chan bool {
	ch := make(chan bool)

	var acc bool
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceByte reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceByte(
	ctx context.Context,
	fn func(v, acc byte) byte,
	values <-chan byte,
) <-chan byte {
	ch := make(chan byte)

	var acc byte
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceString reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceString(
	ctx context.Context,
	fn func(v, acc string) string,
	values <-chan string,
) <-chan string {
	ch := make(chan string)

	var acc string
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceUint reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceUint(
	ctx context.Context,
	fn func(v, acc uint) uint,
	values <-chan uint,
) <-chan uint {
	ch := make(chan uint)

	var acc uint
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceUint64 reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceUint64(
	ctx context.Context,
	fn func(v, acc uint64) uint64,
	values <-chan uint64,
) <-chan uint64 {
	ch := make(chan uint64)

	var acc uint64
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceInt reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceInt(
	ctx context.Context,
	fn func(v, acc int) int,
	values <-chan int,
) <-chan int {
	ch := make(chan int)

	var acc int
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceFloat32 reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceFloat32(
	ctx context.Context,
	fn func(v, acc float32) float32,
	values <-chan float32,
) <-chan float32 {
	ch := make(chan float32)

	var acc float32
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}

// ReduceFloat64 reduce values to the accumulator.
// Use ctx to cancel the stream processing.
func ReduceFloat64(
	ctx context.Context,
	fn func(v, acc float64) float64,
	values <-chan float64,
) <-chan float64 {
	ch := make(chan float64)

	var acc float64
	go func() {
		defer close(ch)

		for v := range values {
			select {
			case <-ctx.Done():
				return
			default:
				acc = fn(v, acc)
				ch <- acc
			}
		}
	}()

	return ch
}
