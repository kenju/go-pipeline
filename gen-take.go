// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pipeline

import "context"

// TakeInterface return n of interface{} items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeInterface(
	ctx context.Context,
	valueCh <-chan interface{},
	num int,
) <-chan interface{} {
	ch := make(chan interface{})

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeBool return n of bool items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeBool(
	ctx context.Context,
	valueCh <-chan bool,
	num int,
) <-chan bool {
	ch := make(chan bool)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeByte return n of byte items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeByte(
	ctx context.Context,
	valueCh <-chan byte,
	num int,
) <-chan byte {
	ch := make(chan byte)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeString return n of string items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeString(
	ctx context.Context,
	valueCh <-chan string,
	num int,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeInt return n of int items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeInt(
	ctx context.Context,
	valueCh <-chan int,
	num int,
) <-chan int {
	ch := make(chan int)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeUint64 return n of uint64 items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeUint64(
	ctx context.Context,
	valueCh <-chan uint64,
	num int,
) <-chan uint64 {
	ch := make(chan uint64)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeFloat32 return n of float32 items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeFloat32(
	ctx context.Context,
	valueCh <-chan float32,
	num int,
) <-chan float32 {
	ch := make(chan float32)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}

// TakeFloat64 return n of float64 items from valueCh channel.
// Use ctx to cancel the stream processing.
func TakeFloat64(
	ctx context.Context,
	valueCh <-chan float64,
	num int,
) <-chan float64 {
	ch := make(chan float64)

	go func() {
		defer close(ch)

		for i := 0; i < num; i++ {
			select {
			case <-ctx.Done():
				return
			case ch <- <-valueCh:
			}
		}
	}()

	return ch
}
