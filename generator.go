package pipeline

import "context"

// GeneratorInt generates channels from int array
// Use ctx to cancel the stream processing.
// TODO: this gonna be generated by go generate for each types
func GeneratorInt(
	ctx context.Context,
	integers ...int,
) <-chan int {
	intCh := make(chan int, len(integers))

	go func() {
		defer close(intCh)

		for _, i := range integers {
			select {
			case <-ctx.Done():
				return
			case intCh <- i:
			}
		}
	}()

	return intCh
}

// GeneratorString generates channels from String array
// Use ctx to cancel the stream processing.
func GeneratorString(
	ctx context.Context,
	arr ...string,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for _, v := range arr {
			select {
			case <-ctx.Done():
				return
			case ch <- v:
			}
		}
	}()

	return ch
}

