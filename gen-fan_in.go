// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pipeline

import (
	"context"
	"sync"
)

// FanInInterface multiplex multiple channels.
// Use ctx to cancel the stream processing.
func FanInInterface(
	ctx context.Context,
	channels ...<-chan interface{},
) <-chan interface{} {
	var wg sync.WaitGroup

	// select from all the channels
	wg.Add(len(channels))

	multiplexedCh := make(chan interface{})
	multiplex := func(c <-chan interface{}) {
		defer wg.Done()
		for i := range c {
			select {
			case <-ctx.Done():
				return
			case multiplexedCh <- i:
			}
		}
	}
	for _, c := range channels {
		go multiplex(c)
	}

	// close a channel for multiplexing when all channels are processed
	go func() {
		wg.Wait()
		close(multiplexedCh)
	}()

	return multiplexedCh
}

// FanInString multiplex multiple channels.
// Use ctx to cancel the stream processing.
func FanInString(
	ctx context.Context,
	channels ...<-chan string,
) <-chan string {
	var wg sync.WaitGroup

	// select from all the channels
	wg.Add(len(channels))

	multiplexedCh := make(chan string)
	multiplex := func(c <-chan string) {
		defer wg.Done()
		for i := range c {
			select {
			case <-ctx.Done():
				return
			case multiplexedCh <- i:
			}
		}
	}
	for _, c := range channels {
		go multiplex(c)
	}

	// close a channel for multiplexing when all channels are processed
	go func() {
		wg.Wait()
		close(multiplexedCh)
	}()

	return multiplexedCh
}

// FanInInt multiplex multiple channels.
// Use ctx to cancel the stream processing.
func FanInInt(
	ctx context.Context,
	channels ...<-chan int,
) <-chan int {
	var wg sync.WaitGroup

	// select from all the channels
	wg.Add(len(channels))

	multiplexedCh := make(chan int)
	multiplex := func(c <-chan int) {
		defer wg.Done()
		for i := range c {
			select {
			case <-ctx.Done():
				return
			case multiplexedCh <- i:
			}
		}
	}
	for _, c := range channels {
		go multiplex(c)
	}

	// close a channel for multiplexing when all channels are processed
	go func() {
		wg.Wait()
		close(multiplexedCh)
	}()

	return multiplexedCh
}

// FanInUint64 multiplex multiple channels.
// Use ctx to cancel the stream processing.
func FanInUint64(
	ctx context.Context,
	channels ...<-chan uint64,
) <-chan uint64 {
	var wg sync.WaitGroup

	// select from all the channels
	wg.Add(len(channels))

	multiplexedCh := make(chan uint64)
	multiplex := func(c <-chan uint64) {
		defer wg.Done()
		for i := range c {
			select {
			case <-ctx.Done():
				return
			case multiplexedCh <- i:
			}
		}
	}
	for _, c := range channels {
		go multiplex(c)
	}

	// close a channel for multiplexing when all channels are processed
	go func() {
		wg.Wait()
		close(multiplexedCh)
	}()

	return multiplexedCh
}

// FanInFloat32 multiplex multiple channels.
// Use ctx to cancel the stream processing.
func FanInFloat32(
	ctx context.Context,
	channels ...<-chan float32,
) <-chan float32 {
	var wg sync.WaitGroup

	// select from all the channels
	wg.Add(len(channels))

	multiplexedCh := make(chan float32)
	multiplex := func(c <-chan float32) {
		defer wg.Done()
		for i := range c {
			select {
			case <-ctx.Done():
				return
			case multiplexedCh <- i:
			}
		}
	}
	for _, c := range channels {
		go multiplex(c)
	}

	// close a channel for multiplexing when all channels are processed
	go func() {
		wg.Wait()
		close(multiplexedCh)
	}()

	return multiplexedCh
}
