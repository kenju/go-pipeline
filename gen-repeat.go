// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pipeline

import "context"

// RepeatInterface return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatInterface(
	ctx context.Context,
	values ...interface{},
) <-chan interface{} {
	ch := make(chan interface{})

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnInterface call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnInterface(
	ctx context.Context,
	fn func() interface{},
) <-chan interface{} {
	ch := make(chan interface{})

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatBool return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatBool(
	ctx context.Context,
	values ...bool,
) <-chan bool {
	ch := make(chan bool)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnBool call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnBool(
	ctx context.Context,
	fn func() bool,
) <-chan bool {
	ch := make(chan bool)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatByte return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatByte(
	ctx context.Context,
	values ...byte,
) <-chan byte {
	ch := make(chan byte)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnByte call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnByte(
	ctx context.Context,
	fn func() byte,
) <-chan byte {
	ch := make(chan byte)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatString return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatString(
	ctx context.Context,
	values ...string,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnString call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnString(
	ctx context.Context,
	fn func() string,
) <-chan string {
	ch := make(chan string)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatInt return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatInt(
	ctx context.Context,
	values ...int,
) <-chan int {
	ch := make(chan int)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnInt call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnInt(
	ctx context.Context,
	fn func() int,
) <-chan int {
	ch := make(chan int)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatUint return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatUint(
	ctx context.Context,
	values ...uint,
) <-chan uint {
	ch := make(chan uint)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnUint call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnUint(
	ctx context.Context,
	fn func() uint,
) <-chan uint {
	ch := make(chan uint)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatUint64 return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatUint64(
	ctx context.Context,
	values ...uint64,
) <-chan uint64 {
	ch := make(chan uint64)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnUint64 call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnUint64(
	ctx context.Context,
	fn func() uint64,
) <-chan uint64 {
	ch := make(chan uint64)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatFloat32 return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatFloat32(
	ctx context.Context,
	values ...float32,
) <-chan float32 {
	ch := make(chan float32)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnFloat32 call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnFloat32(
	ctx context.Context,
	fn func() float32,
) <-chan float32 {
	ch := make(chan float32)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}

// RepeatFloat64 return value via channel from values argument.
// Use ctx to cancel the stream processing.
func RepeatFloat64(
	ctx context.Context,
	values ...float64,
) <-chan float64 {
	ch := make(chan float64)

	go func() {
		defer close(ch)

		for {
			for _, v := range values {
				select {
				case <-ctx.Done():
					return
				case ch <- v:
				}
			}
		}
	}()

	return ch
}

// RepeatFnFloat64 call fn() via channel.
// Use ctx to cancel the stream processing.
func RepeatFnFloat64(
	ctx context.Context,
	fn func() float64,
) <-chan float64 {
	ch := make(chan float64)

	go func() {
		defer close(ch)

		for {
			select {
			case <-ctx.Done():
				return
			case ch <- fn():
			}
		}
	}()

	return ch
}
